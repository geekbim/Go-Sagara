// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "sagara/domain/entity"

	exceptions "sagara/pkg/exceptions"

	mock "github.com/stretchr/testify/mock"
)

// OrderUseCase is an autogenerated mock type for the OrderUseCase type
type OrderUseCase struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, order
func (_m *OrderUseCase) CreateOrder(ctx context.Context, order *entity.Order) (*entity.Order, *exceptions.CustomError) {
	ret := _m.Called(ctx, order)

	var r0 *entity.Order
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Order) *entity.Order); ok {
		r0 = rf(ctx, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	var r1 *exceptions.CustomError
	if rf, ok := ret.Get(1).(func(context.Context, *entity.Order) *exceptions.CustomError); ok {
		r1 = rf(ctx, order)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*exceptions.CustomError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewOrderUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderUseCase creates a new instance of OrderUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderUseCase(t mockConstructorTestingTNewOrderUseCase) *OrderUseCase {
	mock := &OrderUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
