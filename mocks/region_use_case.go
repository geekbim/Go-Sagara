// Code generated by mockery v2.18.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "sagara/domain/entity"

	exceptions "sagara/pkg/exceptions"

	mock "github.com/stretchr/testify/mock"

	request "sagara/internal/delivery/request"
)

// RegionUseCase is an autogenerated mock type for the RegionUseCase type
type RegionUseCase struct {
	mock.Mock
}

// ListRegion provides a mock function with given fields: ctx, options
func (_m *RegionUseCase) ListRegion(ctx context.Context, options *request.Option) ([]*entity.Region, int32, *exceptions.CustomError) {
	ret := _m.Called(ctx, options)

	var r0 []*entity.Region
	if rf, ok := ret.Get(0).(func(context.Context, *request.Option) []*entity.Region); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Region)
		}
	}

	var r1 int32
	if rf, ok := ret.Get(1).(func(context.Context, *request.Option) int32); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Get(1).(int32)
	}

	var r2 *exceptions.CustomError
	if rf, ok := ret.Get(2).(func(context.Context, *request.Option) *exceptions.CustomError); ok {
		r2 = rf(ctx, options)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*exceptions.CustomError)
		}
	}

	return r0, r1, r2
}

type mockConstructorTestingTNewRegionUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewRegionUseCase creates a new instance of RegionUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRegionUseCase(t mockConstructorTestingTNewRegionUseCase) *RegionUseCase {
	mock := &RegionUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
